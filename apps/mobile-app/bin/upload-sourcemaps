#!/usr/bin/env node

const path = require('path');
const fs = require('fs');
const uploadSourcemapsHook = require('../../../node_modules/sentry-expo/upload-sourcemaps');
const bundlesDirPath = path.join(__dirname, '../dist/bundles');
const appConfig = require('../app.json');
const { program, Option } = require('commander');
const spawnAsync = require('../../../node_modules/@expo/spawn-async/index');
require('dotenv').config({ path: path.join(__dirname, '../.env') });

/**
 * Main function in a script that uses expo's upload sourcemaps hook that runs after an update is pushed
 *
 * It can either be invoked by running it with nodejs or by importing in a JS script
 * @param { Object } options the parameters to use when uploading the sourcemap
 * @param { 'android' | 'ios' | 'all' | undefined } options.platform android/ios/all
 * @param { string | undefined } options.distribution buildNumber/versionCode of build OR the update ID if an OTA update has been created with EAS
 */
const run = async (options) => {
  if (!options.platform) {
    throw new Error(
      "A platform needs to be specified; valid options are 'android', 'ios' and 'all'"
    );
  }

  const platform = options.platform;
  const distribution = options.distribution;

  try {
    console.log(`Exporting sourcemaps with expo for ${platform}`);
    const { output } = await spawnAsync('pnpm', [
      'exec',
      'expo',
      'export',
      '--dump-sourcemap',
      '--platform',
      platform,
    ]).catch((e) => {
      throw new Error(e);
    });

    output.map((line) => {
      console.log(line);
    });
  } catch (error) {
    throw new Error(`Could not export sourcemaps with expo export`);
  }

  const baseOptions = {
    log: console.log,
    projectRoot: path.join(__dirname, '../'),
    // unsure what those 2 are for
    androidManifest: undefined,
    iosManifest: undefined,
    config: {
      // not needed since dotenv is filling the process.env up already
      // organization: process.env.SENTRY_ORG,
      // project: process.env.SENTRY_PROJECT,
      // authToken: process.env.SENTRY_AUTH_TOKEN,
      // url: undefined,
      // deployEnv: undefined,
      // setCommits: undefined,
      // useGlobalSentryCli: undefined,
    },
  };

  if (platform === 'android' || platform === 'all') {
    const androidBundle = fs
      .readFileSync(
        path.join(
          bundlesDirPath,
          fs
            .readdirSync(bundlesDirPath)
            .filter((v) => v.startsWith('android') && v.endsWith('.js'))[0]
        )
      )
      .toString('utf8');
    const androidSourceMap = fs
      .readFileSync(
        path.join(
          bundlesDirPath,
          fs
            .readdirSync(bundlesDirPath)
            .filter((v) => v.startsWith('android') && v.endsWith('.map'))[0]
        )
      )
      .toString('utf8');

    const finalOptions = {
      ...baseOptions,
      androidBundle,
      androidSourceMap,
      config: {
        ...baseOptions.config,
        release: `${appConfig.expo.android.package}@${appConfig.expo.version}+${appConfig.expo.android.versionCode}`,
        distribution: distribution ?? appConfig.expo.android.versionCode.toString(),
        platform: 'android',
      },
    };

    console.log(`Uploading sourcemaps with config ${JSON.stringify(finalOptions.config)}`);
    await uploadSourcemapsHook(finalOptions);
  }

  if (platform === 'ios' || platform === 'all') {
    const iosBundle = fs
      .readFileSync(
        path.join(
          bundlesDirPath,
          fs.readdirSync(bundlesDirPath).filter((v) => v.startsWith('ios') && v.endsWith('.js'))[0]
        )
      )
      .toString('utf8');
    const iosSourceMap = fs
      .readFileSync(
        path.join(
          bundlesDirPath,
          fs.readdirSync(bundlesDirPath).filter((v) => v.startsWith('ios') && v.endsWith('.map'))[0]
        )
      )
      .toString('utf8');

    const finalOptions = {
      ...baseOptions,
      iosBundle,
      iosSourceMap,
      config: {
        ...baseOptions.config,
        release: `${appConfig.expo.ios.bundleIdentifier}@${appConfig.expo.version}+${appConfig.expo.ios.buildNumber}`,
        distribution: distribution ?? appConfig.expo.ios.buildNumber,
        platform: 'ios',
      },
    };

    console.log(`Uploading sourcemaps with config ${JSON.stringify(finalOptions.config)}`);
    await uploadSourcemapsHook(finalOptions);
  }
};

program
  .addOption(
    new Option(
      '-p, --platform <platform>',
      'platform for which to indicate the sourcemap is for'
    ).choices(['all', 'android', 'ios'])
  )
  .option(
    '-d, --distribution <distribution>',
    'buildNumber/versionCode of the build or the update id if applicable'
  )
  .action(async function (options) {
    // this action would still be executed when not running the file with nodejs
    // so, only run when using file with nodejs directly otherwise process.argv is empty
    if (process.argv.slice(2).length > 0) {
      await run(options);
    }
  })
  .parse();

module.exports = run;
